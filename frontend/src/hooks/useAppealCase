// src/lib/hooks/useAppealCase.ts
import { useState } from 'react';
import { useAccount } from 'wagmi';
import { apiClient } from '../lib/api/client';
import toast from 'react-hot-toast';

interface AppealRequest {
  caseId: string;
  reason: string;
  appellant: string;
}

interface AppealResponse {
  success: boolean;
  appealId?: string;
  message?: string;
  error?: string;
}

export function useAppealCase() {
  const [loading, setLoading] = useState(false);
  const { address } = useAccount();

  const appealCase = async (caseId: string, reason: string): Promise<boolean> => {
    if (!address) {
      toast.error('Please connect your wallet to file an appeal');
      return false;
    }

    if (!reason.trim()) {
      toast.error('Please provide a reason for the appeal');
      return false;
    }

    if (reason.trim().length < 50) {
      toast.error('Appeal reason must be at least 50 characters long');
      return false;
    }

    setLoading(true);

    try {
      const appealData: AppealRequest = {
        caseId,
        reason: reason.trim(),
        appellant: address
      };

      const response = await apiClient.post<AppealResponse>('/api/cases/appeal', appealData);

      if (response.success) {
        toast.success(response.message || 'Appeal filed successfully');
        return true;
      } else {
        toast.error(response.error || 'Failed to file appeal');
        return false;
      }
    } catch (error: any) {
      console.error('Appeal submission error:', error);
      
      // Handle different types of errors
      if (error.response?.status === 400) {
        toast.error(error.response.data?.error || 'Invalid appeal request');
      } else if (error.response?.status === 401) {
        toast.error('Unauthorized: Please connect your wallet');
      } else if (error.response?.status === 403) {
        toast.error('You are not authorized to appeal this case');
      } else if (error.response?.status === 404) {
        toast.error('Case not found');
      } else if (error.response?.status === 409) {
        toast.error('This case has already been appealed');
      } else if (error.response?.status === 422) {
        toast.error('Appeal period has expired');
      } else {
        toast.error('Network error: Please try again');
      }
      
      return false;
    } finally {
      setLoading(false);
    }
  };

  const canAppeal = (caseStatus: string, isParty: boolean, hasBeenAppealed: boolean): boolean => {
    return (
      isParty && 
      caseStatus === 'judged' && 
      !hasBeenAppealed &&
      !!address
    );
  };

  const getAppealDeadline = (judgmentDate: string): Date => {
    const judgment = new Date(judgmentDate);
    // Appeals must be filed within 30 days of judgment
    judgment.setDate(judgment.getDate() + 30);
    return judgment;
  };

  const isAppealPeriodExpired = (judgmentDate: string): boolean => {
    const deadline = getAppealDeadline(judgmentDate);
    return new Date() > deadline;
  };

  return {
    appealCase,
    loading,
    canAppeal,
    getAppealDeadline,
    isAppealPeriodExpired
  };
}